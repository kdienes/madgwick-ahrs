From: Klee Dienes <klee.dienes@hadronindustries.com>
Date: Fri, 21 Feb 2014 12:13:40 -0500
Subject: Make library-friendly.

---
 MadgwickAHRS/MadgwickAHRS.c | 52 ++++++++++++++----------------------
 MadgwickAHRS/MadgwickAHRS.h | 23 ++++++++++------
 MahonyAHRS/MahonyAHRS.c     | 64 +++++++++++++++++++--------------------------
 MahonyAHRS/MahonyAHRS.h     | 26 +++++++++++-------
 4 files changed, 78 insertions(+), 87 deletions(-)

diff --git a/MadgwickAHRS/MadgwickAHRS.c b/MadgwickAHRS/MadgwickAHRS.c
index c9117aa..91f40de 100644
--- a/MadgwickAHRS/MadgwickAHRS.c
+++ b/MadgwickAHRS/MadgwickAHRS.c
@@ -18,30 +18,22 @@
 #include "MadgwickAHRS.h"
 #include <math.h>
 
-//---------------------------------------------------------------------------------------------------
-// Definitions
-
-#define sampleFreq	512.0f		// sample frequency in Hz
-#define betaDef		0.1f		// 2 * proportional gain
-
-//---------------------------------------------------------------------------------------------------
-// Variable definitions
-
-volatile float beta = betaDef;								// 2 * proportional gain (Kp)
-volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;	// quaternion of sensor frame relative to auxiliary frame
-
-//---------------------------------------------------------------------------------------------------
-// Function declarations
-
-float invSqrt(float x);
-
 //====================================================================================================
 // Functions
 
+static inline float invSqrt(float x) {
+	return 1.0f / sqrt(x);
+}
+
 //---------------------------------------------------------------------------------------------------
 // AHRS algorithm update
 
-void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
+void MadgwickAHRSupdate(float *q, float sampleFreq, float beta, 
+			float gx, float gy, float gz,
+			float ax, float ay, float az,
+			float mx, float my, float mz)
+{
+        float q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3];
 	float recipNorm;
 	float s0, s1, s2, s3;
 	float qDot1, qDot2, qDot3, qDot4;
@@ -50,7 +42,7 @@ void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float
 
 	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
 	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
-		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
+	  MadgwickAHRSupdateIMU(q, sampleFreq, beta, gx, gy, gz, ax, ay, az);
 		return;
 	}
 
@@ -135,12 +127,18 @@ void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float
 	q1 *= recipNorm;
 	q2 *= recipNorm;
 	q3 *= recipNorm;
+
+	q[0] = q0; q[1] = q1; q[2] = q2; q[3] = q3;
 }
 
 //---------------------------------------------------------------------------------------------------
 // IMU algorithm update
 
-void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
+void MadgwickAHRSupdateIMU(float *q, float sampleFreq, float beta,
+			   float gx, float gy, float gz,
+			   float ax, float ay, float az)
+{
+        float q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3];
 	float recipNorm;
 	float s0, s1, s2, s3;
 	float qDot1, qDot2, qDot3, qDot4;
@@ -206,20 +204,8 @@ void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, flo
 	q1 *= recipNorm;
 	q2 *= recipNorm;
 	q3 *= recipNorm;
-}
 
-//---------------------------------------------------------------------------------------------------
-// Fast inverse square-root
-// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root
-
-float invSqrt(float x) {
-	float halfx = 0.5f * x;
-	float y = x;
-	long i = *(long*)&y;
-	i = 0x5f3759df - (i>>1);
-	y = *(float*)&i;
-	y = y * (1.5f - (halfx * y * y));
-	return y;
+	q[0] = q0; q[1] = q1; q[2] = q2; q[3] = q3;
 }
 
 //====================================================================================================
diff --git a/MadgwickAHRS/MadgwickAHRS.h b/MadgwickAHRS/MadgwickAHRS.h
index 2efa7b8..695f109 100644
--- a/MadgwickAHRS/MadgwickAHRS.h
+++ b/MadgwickAHRS/MadgwickAHRS.h
@@ -13,17 +13,24 @@
 #ifndef MadgwickAHRS_h
 #define MadgwickAHRS_h
 
-//----------------------------------------------------------------------------------------------------
-// Variable declaration
-
-extern volatile float beta;				// algorithm gain
-extern volatile float q0, q1, q2, q3;	// quaternion of sensor frame relative to auxiliary frame
-
 //---------------------------------------------------------------------------------------------------
 // Function declarations
 
-void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz);
-void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az);
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+void MadgwickAHRSupdate(float *q, float freq, float beta,
+			float gx, float gy, float gz,
+			float ax, float ay, float az,
+			float mx, float my, float mz);
+void MadgwickAHRSupdateIMU(float *q, float freq, float beta,
+			   float gx, float gy, float gz,
+			   float ax, float ay, float az);
+
+#ifdef __cplusplus
+}
+#endif
 
 #endif
 //=====================================================================================================
diff --git a/MahonyAHRS/MahonyAHRS.c b/MahonyAHRS/MahonyAHRS.c
index 2ec12f0..8276f98 100644
--- a/MahonyAHRS/MahonyAHRS.c
+++ b/MahonyAHRS/MahonyAHRS.c
@@ -17,35 +17,26 @@
 #include "MahonyAHRS.h"
 #include <math.h>
 
-//---------------------------------------------------------------------------------------------------
-// Definitions
-
-#define sampleFreq	512.0f			// sample frequency in Hz
-#define twoKpDef	(2.0f * 0.5f)	// 2 * proportional gain
-#define twoKiDef	(2.0f * 0.0f)	// 2 * integral gain
-
-//---------------------------------------------------------------------------------------------------
-// Variable definitions
-
-volatile float twoKp = twoKpDef;											// 2 * proportional gain (Kp)
-volatile float twoKi = twoKiDef;											// 2 * integral gain (Ki)
-volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;					// quaternion of sensor frame relative to auxiliary frame
-volatile float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;	// integral error terms scaled by Ki
-
-//---------------------------------------------------------------------------------------------------
-// Function declarations
-
-float invSqrt(float x);
-
 //====================================================================================================
 // Functions
 
+static inline float invSqrt(float x) {
+	return 1.0f / sqrt(x);
+}
+
 //---------------------------------------------------------------------------------------------------
 // AHRS algorithm update
 
-void MahonyAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
+void MahonyAHRSupdate(float *q, float *error, float sampleFreq,
+		      float twoKp, float twoKi,
+		      float gx, float gy, float gz,
+		      float ax, float ay, float az,
+		      float mx, float my, float mz)
+{
+        float q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3];
+        float integralFBx = error[0], integralFBy = error[1], integralFBz = error[2];
 	float recipNorm;
-    float q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;  
+	float q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;  
 	float hx, hy, bx, bz;
 	float halfvx, halfvy, halfvz, halfwx, halfwy, halfwz;
 	float halfex, halfey, halfez;
@@ -53,7 +44,7 @@ void MahonyAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az
 
 	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
 	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
-		MahonyAHRSupdateIMU(gx, gy, gz, ax, ay, az);
+	  MahonyAHRSupdateIMU(q, error, sampleFreq, twoKp, twoKi, gx, gy, gz, ax, ay, az);
 		return;
 	}
 
@@ -142,12 +133,22 @@ void MahonyAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az
 	q1 *= recipNorm;
 	q2 *= recipNorm;
 	q3 *= recipNorm;
+
+	q[0] = q0; q[1] = q1; q[2] = q2; q[3] = q3;
+	error[0] = integralFBx; error[1] = integralFBy; error[2] = integralFBz;
 }
 
 //---------------------------------------------------------------------------------------------------
 // IMU algorithm update
 
-void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
+void MahonyAHRSupdateIMU(float *q, float *error, float sampleFreq,
+			 float twoKp, float twoKi,
+			 float gx, float gy, float gz,
+			 float ax, float ay, float az)
+{
+        float q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3];
+        float integralFBx = error[0], integralFBy = error[1], integralFBz = error[2];
+
 	float recipNorm;
 	float halfvx, halfvy, halfvz;
 	float halfex, halfey, halfez;
@@ -211,20 +212,9 @@ void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float
 	q1 *= recipNorm;
 	q2 *= recipNorm;
 	q3 *= recipNorm;
-}
 
-//---------------------------------------------------------------------------------------------------
-// Fast inverse square-root
-// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root
-
-float invSqrt(float x) {
-	float halfx = 0.5f * x;
-	float y = x;
-	long i = *(long*)&y;
-	i = 0x5f3759df - (i>>1);
-	y = *(float*)&i;
-	y = y * (1.5f - (halfx * y * y));
-	return y;
+	q[0] = q0; q[1] = q1; q[2] = q2; q[3] = q3;
+	error[0] = integralFBx; error[1] = integralFBy; error[2] = integralFBz;
 }
 
 //====================================================================================================
diff --git a/MahonyAHRS/MahonyAHRS.h b/MahonyAHRS/MahonyAHRS.h
index 9000997..ab5cfd6 100644
--- a/MahonyAHRS/MahonyAHRS.h
+++ b/MahonyAHRS/MahonyAHRS.h
@@ -13,18 +13,26 @@
 #ifndef MahonyAHRS_h
 #define MahonyAHRS_h
 
-//----------------------------------------------------------------------------------------------------
-// Variable declaration
-
-extern volatile float twoKp;			// 2 * proportional gain (Kp)
-extern volatile float twoKi;			// 2 * integral gain (Ki)
-extern volatile float q0, q1, q2, q3;	// quaternion of sensor frame relative to auxiliary frame
-
 //---------------------------------------------------------------------------------------------------
 // Function declarations
 
-void MahonyAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz);
-void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az);
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+void MahonyAHRSupdate(float *q, float *error, float sampleFreq,
+		      float twoKp, float twoKi,
+		      float gx, float gy, float gz,
+		      float ax, float ay, float az,
+		      float mx, float my, float mz);
+void MahonyAHRSupdateIMU(float *q, float *error, float sampleFreq,
+			 float twoKp, float twoKi,
+			 float gx, float gy, float gz,
+			 float ax, float ay, float az);
+
+#ifdef __cplusplus
+}
+#endif
 
 #endif
 //=====================================================================================================
